Set-ExecutionPolicy RemoteSigned
Add-Type -AssemblyName System.Windows.Forms

# Start Disk Cleanup and wait for it to open
Start-Process -FilePath "cleanmgr.exe" -ArgumentList "/sageset:65535" -WindowStyle Hidden
Start-Sleep -Seconds 5  # Wait for Disk Cleanup to open

# Define the handle to the Disk Cleanup window
$diskCleanupWindow = Get-Process | Where-Object { $_.MainWindowTitle -like "Disk Cleanup*" }
Write-Host "--------------------------------------------------------"
Write-Host "Script created and maintained by www.PeckDevelopment.com"
Write-Host "Support at BTC bc1qw368jup8wl6uu5mfuw3vxuxw5elpqscata5c9t"
Write-Host "--------------------------------------------------------"

# Wait for the window to become active
while (-not $diskCleanupWindow.MainWindowHandle) {
    Start-Sleep -Milliseconds 500
    $diskCleanupWindow.Refresh()
}

# Wait for Disk Cleanup to finish loading
Start-Sleep -Seconds 5

# Use Windows API to send messages to the window to check all checkboxes and run cleanup
$handle = $diskCleanupWindow.MainWindowHandle

# Constants for Windows messages
$BM_CLICK = 0xF5
$WM_SETFOCUS = 0x0007
$WM_COMMAND = 0x0111

# Check all checkboxes
for ($i = 0; $i -le 12; $i++) {
    [System.Windows.Forms.SendKeys]::SendWait("{TAB}")
    Start-Sleep -Milliseconds 100
    [System.Windows.Forms.SendKeys]::SendWait("{SPACE}")
    Start-Sleep -Milliseconds 100
}

# Click OK to start cleanup
$null = [System.Windows.Forms.SendMessage]::SendMessage($handle, $WM_COMMAND, $BM_CLICK, 0)

# Wait for Disk Cleanup to close
$diskCleanupWindow.WaitForExit()
